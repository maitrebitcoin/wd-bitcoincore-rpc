#To edit and compare internal_properties, use WINDEV integrated tools.
#Internal properties refer to the properties of controls in windows, reports, etc.
info :
 name : NoeudBitcoin
 major_version : 28
 minor_version : 0
 type : 4
 description : ""
 subtype : 0
class :
 identifier : 0x14232d49000a3cf0
 internal_properties : CAAAAAgAAAB2/vstTMCJbS/hlxjFxirSqKvCUuv8YxgpWyl7S3iA
 code_elements :
  type_code : 10
  p_codes :
   -
     code : |1+
      // classe wrapper pour l'interface JSon-RPC d'un noeud bitcoin-core
      //voir https://developer.bitcoin.org/reference/rpc/ pour plus de détails sur les méthodes
      
      NoeudBitcoin est une Classe
      	// N° de port pour Json RPC. par défaut 32
      	mum_port est entier 
      	// information d’authentification
      	user est chaine ansi
      	password est chaine ansi
      	// Option pour tracer le traffic http
      	mode_trace_http est un booléen 
      fin
      
      constant ERR_JSON_RPC = 21 // N° d'erreur renvoyé par ErreurInfo
      
     type : 131072
  procedures :
   -
     name : Constructeur
     procedure_id : 1451053296500030704
     type_code : 27
     code : |1+
      procédure Constructeur(login est chaine,pass est chaine="")
      
      :mum_port = 8332
      :user 	  = login 
      :password = pass 
     type : 589824
   -
     name : Destructeur
     procedure_id : 1451053296500096240
     type_code : 28
     code : |1+
      procédure Destructeur()
     type : 655360
   -
     name : genèreSectionFichierConfiguration
     procedure_id : 1451207485830530771
     type_code : 12
     code : |1-
      // génère la section du fichier de configuration "bitcoin.conf" qui permet de communiquer avec un noeud bitcoincore local
      procédure genèreSectionFichierConfiguration() : chaine
      
      sSecctionConfigRcp est une chaîne = [
      # Connexion RPC
      rpcuser=[%:user%]
      rpcpassword=[%:password%]
      rpcport=8332
      rpcallowip=127.0.0.1
      server=1
      ]
      renvoyer sSecctionConfigRcp
     type : 458752
   -
     name : _requeteRpc
     procedure_id : 1451054018055229439
     type_code : 12
     code : |1+
      // exécution d'une requete RPC
      procédure PRIVÉE _requeteRpc( nomMethode est chaine, _callback_succes procédure, *  )
      
      
      requete_local est un httpRequête
      requete_local.URL			= "http://localhost:" + :mum_port + "/"
      requete_local.Méthode		= httpPost
      // Info d'identification pour "Authorization: Basic "
      //requete_local.Entête["Authorization"]="Basic "+ Encode(login+":"+ pass ,encodeBASE64)
      requete_local.Utilisateur	= :user
      requete_local.MotDePasse	= :password
      // init requet json a envoyer
      s_params est chaine
      
      requete_json est JSON = [
      	{
      	"jsonrpc": "1.0", 
      	"id": "wdbridge", 
      	"method": "[%nomMethode%]", 
      	"params": [[%s_params%]]
      	}
      ] 
      POUR I = 3 _À_ MesParamètres..Occurrence
      	//s_params += [","] + """"+ MesParamètres[I] + """"
      	requete_json.params[I-2] = MesParamètres[I] 
      FIN
      
      // ex : 	{"jsonrpc": "1.0", "id": "wdbridge", "method": "[%nomMethode%]", "params": []}
      requete_local.Contenu	  = requete_json
      requete_local.ContentType = typeMimeJSON
      //Trace(req_0.URL)
      //Trace(req_0.Contenu)
      //trace(req_0.Entête["Authorization"])
      si mode_trace_http alors
      	requete_local.ProcédureTrace = _CallbcakTraceTraffcieReseauHttp
      fin
      reponse_0 est un httpRéponse = HTTPEnvoie(requete_local)
      SI ErreurDétectée ALORS
      	renvoyer faux
      FIN
      resultat_json est un JSON
      // si erreur
      si reponse_0.CodeEtat<>200 ALORS
      	// erreur 500 : internal serveur error, on a peut peut plus d'info
      	 si reponse_0.CodeEtat=500 ALORS
      	 	resultat_json = reponse_0.Contenu
      	 	SI resultat_json.error<>Null ALORS
      	 		ErreurDéclenche(::ERR_JSON_RPC, resultat_json.error.message + RC + "Fonction appelée : [%nomMethode%]"  )
      	 		RENVOYER Faux
      		fin	 		
      	 FIN
      	
      	ErreurDéclenche(::ERR_JSON_RPC, reponse_0.DescriptionCodeEtat )
      	RENVOYER Faux
      FIN
      
      //	on décode de résultat
      // ex:
      // {"result":782927,"error":null,"id":"wdbridge"}<\n>
      
      resultat_json = reponse_0.Contenu
      si resultat_json.error<>null ALORS
      	ErreurDéclenche(::ERR_JSON_RPC, resultat_json.error.message  + RC + "Fonction appelée : [%nomMethode%]" )
      	RENVOYER Faux
      FIN
      
      // Sucess
      _callback_succes( resultat_json.result )
      RENVOYER vrai
     type : 458752
   -
     name : _CallbcakTraceTraffcieReseauHttp
     procedure_id : 1451055912136116294
     type_code : 12
     code : |1+
      procédure privée _CallbcakTraceTraffcieReseauHttp(nTypeInfo est entier, bufByData est un Buffer)
      SELON nTypeInfo
      	CAS httpTraceEntêteEnvoyé:
      		Trace("Entête envoyé : ", ...
      		UTF8VersChaîne(bufByData))
      	CAS httpTraceDonnéeEnvoyée:
      		Trace("Données envoyées : ", ...
      		bufByData)
      	CAS httpTraceEntêteRecu:
      		Trace("Entête reçu : ", ...
      		UTF8VersChaîne(bufByData))
      	CAS httpTraceDonnéeRecue:
      		Trace("Données reçues : ", ...
      		bufByData)
      fin
      
     type : 458752
   -
     name : getbestblockhash
     procedure_id : 1451058136929562518
     type_code : 12
     code : |1+
      // renvoie le hash du dernier bloc de la chaine la plus longue entièrement validée
      procédure getbestblockhash() : BlockHash
      
      resultat est un BlockHash // UUID sur 256
      _requeteRpc("getbestblockhash", (s)=>{ resultat.valeur = s } )
      renvoyer resultat
     type : 458752
   -
     name : getblock_json
     procedure_id : 1451061293731063658
     type_code : 12
     code : |1+
      // renvoie un block a partir de son hash
      // verbosity = 0 pour juste le bloc au format binaire, utiliser plutot getblock_brut
      // verbosity = 1 pour des info au format JSON
      // verbosity = 2 pour des info au format JSON + infos de transaction
      procédure getblock_json( hash BlockHash, verbosity entier = 1 ) : JSON
      
      resultat est un JSON
      _requeteRpc("getblock", (s)=>{ resultat = s }, hash.valeur, verbosity  )
      RENVOYER resultat
     type : 458752
   -
     name : getblock_brut
     procedure_id : 1451223458819786299
     type_code : 12
     code : |1+
      // renvoie le contenu binaire d'un bloc en fonction de son hash
      // voir https://developer.bitcoin.org/reference/rpc/getblock.html
      procédure getblock_brut(hash BlockHash )  : buffer
      
      resultat est une chaîne ANSI
      _requeteRpc("getblock", (s)=>{ resultat = s }, hash.valeur, 0  )
      SI ErreurDétectée RENVOYER "" // sinon HexaVersBuffer RAZ ErreurInfo()
      RENVOYER HexaVersBuffer( resultat )
     type : 458752
   -
     name : getblockchaininfo
     procedure_id : 1451065279461248739
     type_code : 12
     code : |1+
      // renvoie un objet JSon contenant diverses info sur la chaine de blocs (taille sur disque par ex.)
      procédure getblockchaininfo() : json
      
      resultat est un JSON
      _requeteRpc("getblockchaininfo", (s)=>{ resultat = s } )
      RENVOYER resultat
      
     type : 458752
   -
     name : getblockfilter
     procedure_id : 1451216324877708787
     type_code : 12
     code : |1-
      // Retrieve a BIP 157 content filter for a particular block
      // voir https://developer.bitcoin.org/reference/rpc/getblockfilter.html
      procédure getblockfilter( hash BlockHash, filtertype chaine="basic" ) : JSON
      
      resultat est un JSON
      _requeteRpc("getblockfilter", (s)=>{ resultat = s }, hash.valeur, filtertype)
      RENVOYER resultat
     type : 458752
   -
     name : getblockcount
     procedure_id : 1451066305958606900
     type_code : 12
     code : |1+
      // renvoie la hauteur du bloc plus haut de la chaine = taille de chaine avec le plus de preuve de travail cumulée
      procédure getblockcount() : entier
      
      resultat est un entier
      _requeteRpc("getblockcount", (r)=>{ resultat = r } )
      RENVOYER resultat
     type : 458752
   -
     name : getblockhash
     procedure_id : 1451218163124008512
     type_code : 12
     code : |1+
      // renvoie le hash du bloc de hauteur <hauteur> dans la meilleur chaine courante
      procédure getblockhash( hauteur entier) : TransactionID
      
      resultat est un TransactionID
      _requeteRpc("getblockhash", (s)=>{ resultat.valeur = s}, hauteur )
      RENVOYER resultat
     type : 458752
   -
     name : getblockheader_json
     procedure_id : 1451219335650484377
     type_code : 12
     code : |1+
      // renvoie les infos de l'entête d'un bloc par hash détaillées au format json
      // voir https://developer.bitcoin.org/reference/rpc/getblockheader.html
      procédure getblockheader_json( hash BlockHash) : JSON
      
      resultat est un JSON
      _requeteRpc("getblockheader", (s)=>{ resultat = s}, hash.valeur, vrai)
      RENVOYER resultat
     type : 458752
   -
     name : getblockheader_brut
     procedure_id : 1451221178191687409
     type_code : 12
     code : |1+
      // renvoie les infos de l'entête brut d'un bloc par hash 
      // voir https://developer.bitcoin.org/reference/rpc/getblockheader.html
      PROCÉDURE getblockheader_brut( hash BlockHash ) : buffer
      
      resultat est une chaîne ANSI
      _requeteRpc("getblockheader", (s)=>{ resultat = s}, hash.valeur, faux)
      SI ErreurDétectée RENVOYER "" // sinon HexaVersBuffer RAZ ErreurInfo()
      RENVOYER HexaVersBuffer(resultat)
     type : 458752
   -
     name : getblockstats
     procedure_id : 1451226972103524903
     type_code : 12
     code : |1+
      // calcul de statistiques sur un bloc a partie de son hash (ex : frais de transactions min/max/moyen )
      // voir https://developer.bitcoin.org/reference/rpc/getblockstats.html
      procédure getblockstats(hash BlockHash ) : json
      
      resultat est un JSON
      _requeteRpc("getblockstats", (s)=>{ resultat = s}, hash.valeur )
      RENVOYER resultat
     type : 458752
   -
     name : getblockstats
     procedure_id : 1451226972103524903
     type_code : 12
     code : |1+
      // calcul de statistiques sur un bloc a partie de sa hauteur  (ex : frais de transactions min/max/moyen )
      // voir https://developer.bitcoin.org/reference/rpc/getblockstats.html
      PROCÉDURE getblockstats( hauteur est entier ) : JSON
      
      resultat est un JSON
      _requeteRpc("getblockstats", (s)=>{ resultat = s}, hauteur )
      RENVOYER resultat
     type : 458753
   -
     name : getchaintips
     procedure_id : 1451228698680714500
     type_code : 12
     code : |1+
      // Info sur la chaine et ses branches si il y en a
      // voir https://developer.bitcoin.org/reference/rpc/getchaintips.html
      procédure getchaintips()
      
      resultat est un JSON
      _requeteRpc("getchaintips", (s)=>{ resultat = s} )
      RENVOYER resultat
     type : 458752
   -
     name : getchaintxstats
     procedure_id : 1451229458890103032
     type_code : 12
     code : |1-
      // statistique sur le nombre de transactions
      // voir https://developer.bitcoin.org/reference/rpc/getchaintxstats.html
      procédure getchaintxstats( nbBlock entier=0 )
      
      resultat est un JSON
      si nbBlock=0 alors
      	// aucun paramètre
      	_requeteRpc("getchaintxstats", (s)=>{ resultat = s}  )
      sinon 
      	// 1 paramètres
      	_requeteRpc("getchaintxstats", (s)=>{ resultat = s}, nbBlock  )
      fin
      RENVOYER resultat
      // statistique sur le nombre de transactions
      // voir https://developer.bitcoin.org/reference/rpc/getchaintxstats.html
     type : 458752
   -
     name : getchaintxstats
     procedure_id : 1451229458890103032
     type_code : 12
     code : |1-
      PROCÉDURE getchaintxstats( nbBlock entier, hash_dernier_bloc BlockHash  )
      // 2 paramètres
      resultat est un JSON
      _requeteRpc("getchaintxstats", (s)=>{ resultat = s}, nbBlock, hash_dernier_bloc.valeur  )
      RENVOYER resultat
     type : 458753
   -
     name : getdifficulty
     procedure_id : 1451234784649938323
     type_code : 12
     code : |1+
      // renvoie la difficulté de la preuve de travail
      // voir https://developer.bitcoin.org/reference/rpc/getdifficulty.html
      procédure getdifficulty() : numérique
      
      resultat est un numérique 
       _requeteRpc("getdifficulty", (r)=>{ resultat = r} )
       
      RENVOYER resultat
     type : 458752
   -
     name : getmempoolancestors
     procedure_id : 1452399648491004631
     type_code : 12
     code : |1+
      // renvoie les ancètre d'une transaction du mempool
      // voir https://developer.bitcoin.org/reference/rpc/getmempoolancestors.html
      procédure getmempoolancestors( txid est un TransactionID,  détaillé est un booléen=faux) : json
      
      resultat est un  JSON
      _requeteRpc("getmempoolancestors", (r)=>{ resultat = r}, txid.valeur, détaillé )
      RENVOYER resultat
     type : 458752
   -
     name : getmempooldescendants
     procedure_id : 1452400726528046646
     type_code : 12
     code : |1+
      // renvoie les fils d'une transaction du mempool
      // voir https://developer.bitcoin.org/reference/rpc/getmempooldescendants.html
      procédure getmempooldescendants( txid est un TransactionID,  détaillé est un booléen=faux) : json
      
      resultat est un  JSON
      _requeteRpc("getmempoolancestors", (r)=>{ resultat = r}, txid.valeur, détaillé )
      RENVOYER resultat
     type : 458752
   -
     name : getmempoolentry
     procedure_id : 1452401203269658933
     type_code : 12
     code : |1+
      // renvoie le deétail d'une transaction dans le mempool par txis
      // voir https://developer.bitcoin.org/reference/rpc/getmempoolentry.html
      procédure getmempoolentry(txid est un TransactionID) : json
      
      resultat est un  JSON
      _requeteRpc("getmempoolentry", (r)=>{ resultat = r}, txid.valeur )
      RENVOYER resultat
     type : 458752
   -
     name : getmempoolinfo
     procedure_id : 1451238297933414408
     type_code : 12
     code : |1+
      // détails sur les transaction dans le mempool
      // voir https://developer.bitcoin.org/reference/rpc/getmempoolinfo.html
      procédure getmempoolinfo() : JSON
      
      resultat est un  JSON
      _requeteRpc("getmempoolinfo", (r)=>{ resultat = r} )
      RENVOYER resultat
     type : 458752
   -
     name : getrawmempool
     procedure_id : 1452402869717095356
     type_code : 12
     code : |1+
      // renvoie tous les txid de transactions dans le mempool
      // voir https://developer.bitcoin.org/reference/rpc/getrawmempool.html
      procédure getrawmempool( détaillé Booléen = faux, mempoolSequence booléen = faux ) : json
      
      resultat est un  JSON
      _requeteRpc("getrawmempool", (r)=>{ resultat = r}, détaillé,  mempoolSequence)
      RENVOYER resultat
     type : 458752
   -
     name : gettxout
     procedure_id : 1452405287780903496
     type_code : 12
     code : |1+
      // renvoie les infosmation d'une sortie de transaction
      // voir https://developer.bitcoin.org/reference/rpc/gettxout.html
      procédure gettxout( txid est un TransactionID, indice entier, avecMempool est un booléen = vrai ) : json
      
      resultat est un  JSON
      _requeteRpc("gettxout", (r)=>{ resultat = r}, txid.valeur,indice, avecMempool)
      RENVOYER resultat
     type : 458752
   -
     name : gettxoutproof
     procedure_id : 1452407040127903040
     type_code : 12
     code : |1+
      // renvoie la preuve que des transactions sont bien dans un bloc
      // voir https://developer.bitcoin.org/reference/rpc/gettxoutproof.html
      procédure gettxoutproof( tabTxid est un tableau de TransactionID,  hash est un BlockHash ) : ProofTxidInChain
      
      // conversion de paramètre pour l'appel json
      tab_txid_converti est un tableau de chaine// = "[" 
      pour i = 1 _a_  tabTxid..Occurrence
      	tab_txid_converti.ajoute( tabTxid[i].valeur )
      FIN
       
      resultat est ProofTxidInChain
      resultat_str est une chaine ANSI
      si hash.valeur=HASH_NULL ALORS
      	// 1 paramètre
      	_requeteRpc("gettxoutproof", (r)=>{ resultat_str = r}, tab_txid_converti)
      sinon
      	// 2 peramètres
      	_requeteRpc("gettxoutproof", (r)=>{ resultat_str = r}, tab_txid_converti, hash.valeur)
      fin
      si ErreurDétectée renvoyer resultat // sinon HexaVersBuffer RAZ ErreurInfo()
      resultat.valeur =  HexaVersBuffer(resultat_str) 
      renvoyer resultat
     type : 458752
   -
     name : verifytxoutproof
     procedure_id : 1452435498583244723
     type_code : 12
     code : |1+
      // vérifie si une preuve correspond bien a des transactions dans la chaine
      // voir https://developer.bitcoin.org/reference/rpc/verifytxoutproof.html
      procédure verifytxoutproof( preuve est ProofTxidInChain ) : tableau de TransactionID
      preuve_hexstr est chaine ANSI = remplace( BufferVersHexa(preuve.valeur,1,SansLigne), " ","")
      resultat est un tableau de TransactionID
      resultatJSON est un JSON
      
      _requeteRpc("verifytxoutproof", (r)=>{ resultatJSON = r}, preuve_hexstr )
      SI ErreurDétectée renvoyer resultat
      // conversion du json en tableau de 	TransactionID
      pour tous txid de resultatJSON
      	transctionID est TransactionID
      	transctionID.valeur = ""+ txid
      	resultat.Ajoute(transctionID)
      fin
      RENVOYER resultat
     type : 458752
   -
     name : gettxoutsetinfo
     procedure_id : 1452432582300164814
     type_code : 12
     code : |1+
      // renvoie des statistiques sur l'utxo set
      // voir https://developer.bitcoin.org/reference/rpc/gettxoutsetinfo.html
      //* NOTE : le temps de réponse peut être assez long (~30 secondes)
      // ex de résultat:
      //{
      //	"height":783451,
      //	"bestblock":"0000000000000000000029d63cb63b02d4ac3275e0dee07f6ab3943781e1a340",
      //	"txouts":87160255,
      //	"bogosize":6504281822,
      //	"total_amount":19333855.70820647,
      //	"transactions":51723603,
      //	"disk_size":5320776083
      //}
      procédure gettxoutsetinfo( avecLesHash est un booléen = faux  ) : json
      
      hash_type est chaine = "none"
      si avecLesHash ALORS
      	hash_type = "hash_serialized_2"
      FIN
      
      resultat est un  JSON
      _requeteRpc("gettxoutsetinfo", (r)=>{ resultat = r}, hash_type)
      RENVOYER resultat
     type : 458752
   -
     name : getmemoryinfo
     procedure_id : 1452483241440665447
     type_code : 12
     code : |1+
      // renvoie des stats sur l'utilsiation de la mémoire
      // voir https://developer.bitcoin.org/reference/rpc/getmemoryinfo.html 
      procédure getmemoryinfo() : JSON
      
      
      resultat est un  JSON
      _requeteRpc("getmemoryinfo", (r)=>{ resultat = r})
      RENVOYER resultat
     type : 458752
   -
     name : getrpcinfo
     procedure_id : 1452481961540309597
     type_code : 12
     code : |1+
      // détail sur le serveur RPC.
      // voir https://developer.bitcoin.org/reference/rpc/getrpcinfo.html
      procédure getrpcinfo() : JSON
      
      resultat est un  JSON
      _requeteRpc("getrpcinfo", (r)=>{ resultat = r})
      RENVOYER resultat
     type : 458752
   -
     name : help
     procedure_id : 1452484207808531719
     type_code : 12
     code : |1+
      // renvoie l'aide sur une commande ou la liste des commandes
      // voir https://developer.bitcoin.org/reference/rpc/help.html
      procédure help( nomCommande chaine="" ) : chaine
      
      resultat est chaine
      si nomCommande="" ALORS
      	// liste les commandes
      	_requeteRpc("help", (r)=>{ resultat = r})
      sinon
      	// aide sur la commande <nomCommande>
      	_requeteRpc("help", (r)=>{ resultat = r}, nomCommande)
      fin
      RENVOYER resultat
     type : 458752
   -
     name : uptime
     procedure_id : 1452485311615384135
     type_code : 12
     code : |1+
      // renvoie le temps depuis lequel le noeud bitcoin est lancé
      procédure uptime() : durée
      
      resultat est un Durée
      _requeteRpc("uptime", (r)=>{ resultat.Seconde = r})
      RENVOYER resultat
      
     type : 458752
   -
     name : getconnectioncount
     procedure_id : 1452487540703929259
     type_code : 12
     code : |1+
      // renvoie le nombre de noeuds auquel on est connecté
      procédure getconnectioncount() : entier
      
      resultat est un entier
      _requeteRpc("getconnectioncount", (r)=>{ resultat = r})
      RENVOYER resultat
     type : 458752
   -
     name : validateaddress
     procedure_id : 1452488386812748873
     type_code : 12
     code : |1+
      // valider un adresse bitcoin
      procédure validateaddress( adresse chaine ) : json
      
      resultat est un  JSON
      _requeteRpc("validateaddress", (r)=>{ resultat = r}, adresse)
      RENVOYER resultat
      
      
     type : 458752
  procedure_templates : []
  property_templates : []
 code_parameters :
  internal_properties : CAAAAAgAAACVGQgYbalU7DKC3oH4ItDrjtcTHXXV/EuH8q0IbhyQlw==
  original_name : Classe1
resources :
 string_res :
  identifier : 0x14232d3e000412b4
  internal_properties : CAAAAAgAAACm76HWfKGWp33VjXInA4cRlqArlgTTA862QGt72W2ld5Y=
custom_note :
 internal_properties : CAAAAAgAAABtB9HWVzrXO2+4NDRVK0vmzaNKrCKqH1DBX30lMmGZ
